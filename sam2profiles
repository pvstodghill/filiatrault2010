#! /usr/bin/env perl

use strict;
use warnings;

use Getopt::Std;

our $opt_d = ".";
our $opt_h;
our $opt_n;
our $opt_s;

sub usage {
  print STDERR "Usage: $0 [options] tag [accession ...]\n";
  print STDERR "-d DIR - output directory\n";
  print STDERR "-h - print help\n";
  print STDERR "-n - make naive profiles\n";
  print STDERR "-s - make sinister profiles\n";
  exit(@_);
}

my $stat = getopts('d:hns');
if (!$stat) {
  usage(1);
}
if ($opt_h) {
  usage();
}

if (!$opt_s && !$opt_n) {
  print STDERR "Either -s or -n must be specified.\n";
  usage(1);
}
my $tag = shift @ARGV;
if (!defined($tag) || $tag eq "-h") {
  usage(1);
}


my %contig_length;
my %sinisters_plus;
my %sinisters_minus;
my %naives_plus;
my %naives_minus;

while (<STDIN>) {
  chomp;
  if (/^\@SQ\t+(.*)/) {
    my $accession;
    my $length;
    foreach my $attr (split(/\t/,$1)) {
      if ( $attr =~ /SN:(.*)/ ) {
	$accession = $1;
      } elsif ( $attr =~ /LN:(.*)/ ) {
	$length = $1;
      }
    }
    (defined($accession)) || die "accession not found in input file,";
    (defined($length)) || die "length not found in input file,";
    if ($#ARGV >= 0) {
      my $found = 0;
      foreach my $s (@ARGV) {
	if (index($accession,$s) > -1) {
	  $found = 1;
	  last;
	}
      }
      if (!$found) { next; }
    }
    $contig_length{$accession} = $length;
    if ($opt_s) {
      my $s_p = [-1];
      my $s_m = [-1];
      for (my $i=1; $i<=$length; $i++) {
	push @$s_p, 0;
	push @$s_m, 0;
      }
      $sinisters_plus{$accession} = $s_p;
      $sinisters_minus{$accession} = $s_m;
    }
    if ($opt_n) {
      my $n_p = [-1];
      my $n_m = [-1];
      for (my $i=1; $i<=$length; $i++) {
	push @$n_p, 0;
	push @$n_m, 0;
      }
      $naives_plus{$accession} = $n_p;
      $naives_minus{$accession} = $n_m;
    }
    next;
  }
  if (/^\@/) {
    next;
  }

  my ($qname,$flag,$rname,$pos,$mapq,$cigar,$rnext,$pnext,$tlen,$seq)
    = split(/\t/);

  my $s_p = $sinisters_plus{$rname};
  my $s_m = $sinisters_minus{$rname};
  my $n_p = $naives_plus{$rname};
  my $n_m = $naives_minus{$rname};

  my $rname_length = $contig_length{$rname};
  if (!defined($rname_length)) {
    # Skip. we aren't generating profiles for this accession
    next;
  }

  my $strand = ($flag & 0x10) ? "-" : "+";
  # $pos is leftmost mapping POSition of the first matching base.
  my $left_pos = $pos;
  # We have to compute the rightmost position
  my $right_pos = $pos;

  my $seq_width = 0;
  my $ref_width = 0;
  my $tmp_cigar = $cigar;
  while ( $tmp_cigar =~ /^([0-9]+)([A-Z])(.*)/ ) {
    my ($width,$op) = ($1,$2);
    $tmp_cigar = $3;
    if ( $op eq "M" ) {
      # M - alignment match (can be a sequence match or mismatch) 
      $seq_width += $width;
      $ref_width += $width;
      if ($opt_n) {
	for (my $i=1; $i<=$width; $i++) {
	  if ($strand eq "+") {
	    ${$n_p}[$right_pos]++;
	  } else {
	    ${$n_m}[$right_pos]++;
	  }
	  $right_pos++;
	}
      } else {
	$right_pos += $width;
      }
    } elsif ( $op eq "I" ) {
      # I - insertion to the reference
      $seq_width += $width;
      $ref_width += 0;
      $right_pos += 0;
    } elsif ( $op eq "D" ) {
      # D - deletion from the reference
      $seq_width += 0;
      $ref_width += $width;
      $right_pos += $width;
    } elsif ( $op eq "N" ) {
      # N - skipped region from the reference
      $seq_width += 0;
      $ref_width += $width;
      $right_pos += $width;
    } else {
      die "cigar=$cigar,";
    }
  }
  $right_pos--;

  ( 1 <= $right_pos && $right_pos <= $rname_length )
    || die "position <<$right_pos>> outside of genomic coordiantes,";

  if ($opt_s) {
    if ($strand eq "+") {
      ${$s_p}[$left_pos]++;
    } else {
      ${$s_m}[$right_pos]++;
    }
  }
}

sub fix_accession {
  my ($accession) = @_;
  if ($accession =~ /\|/) {
    my @l = split(/\|/, $accession);
    if (defined($l[0]) && $l[0] eq "gi") {
      my $s = $l[3];
      $s =~ s/\.[0-9]$//;
      return $s;
    } else {
      die "fix_accession(\"$accession\"),";
    }
  } elsif ($accession =~ / /) {
    my @l = split(/ /, $accession);
    if (defined($l[0])) {
      return $l[0];
    }
  } else {
    #die "fix_accession(\"$accession\"),";
    $accession =~ s/\.[0-9]$//;
    return $accession;
  }
}

sub write_profile {
  my ($accession,$tag,$type,$p,$m) = @_;
  my $out_name = $opt_d."/".fix_accession($accession)."_".$tag.".".$type.".profile";
  open(my $fh,">",$out_name) || die "Cannot open for writing: <<$out_name>>,";
  for (my $i=1; $i<=$#{$p}; $i++) {
    print $fh ${$p}[$i]," ",${$m}[$i],"\n";
  }
  close $fh;
}

foreach my $accession (keys %contig_length) {
  if ($opt_s) {
    write_profile($accession,$tag,"sinister",
		  $sinisters_plus{$accession},
		  $sinisters_minus{$accession});
  }
  if ($opt_n) {
    write_profile($accession,$tag,"naive",
		  $naives_plus{$accession},
		  $naives_minus{$accession});
  }
}
